use { Vessel, AutopilotMode } from ksp::vessel
use { CONSOLE } from ksp::console
use { sleep, current_time, yield } from ksp::game
use { format } from core::str

pub struct Display() {
    // Subcomponents
    mission : Option<glib::mission::Mission> = glib::mission::Mission_None()
    h1 : string = "KSP2 Mission Bot"
    h2 : string = "(c) 2023 by Guido Appenzeller"
    h3 : string = ""
    h4 : string = ""
    h5 : string = ""
    last_update : float = 0
}

pub sync fn Display_None() -> Option<Display> = {
    return None()
}

pub sync fn panic( s : string) -> Unit = {
    CONSOLE.print_line("*** Panic: "+s)
}

pub sync fn warning( s : string) -> Unit = {
    CONSOLE.print_line("** Warning: "+s)
}

pub sync fn debug( s : string) -> Unit = {
    CONSOLE.print_line("      > "+s)
}


// Pretty distance print
pub sync fn pretty_distance(dd : float) -> string = {
    let sign = ""
    let d = dd
    if (dd < 0) {
        sign = "-"
        d = -dd
    }
    if (d>1000000) 
        return(format("{1}{0:N0} km", (d/1000, sign) ) )
    if (d>1000) 
        return(format("{1}{0:N2} km", (d/1000, sign) ) )
    return(format("{1}{0:N1} m", (d, sign) ) )
}


// Pretty print time
pub sync fn pretty_time(time : float) -> string = {
    let s = time.to_int
    if (s>21600) 
        return(format("{0:N0}d {1:N0}:{2,2:00}:{3,2:00}", (s/21600, (s/3600)%6, (s/60)%60, s%60) ))
    if (s>3600) 
        return(format("{0:N0}:{1,2:00}:{2,2:00}", (s/3600, (s/60)%60, s%60) ))
    if (s>200) 
        return(format("{0:N0}:{1,2:00}", (s/60, s%60) ) )
    return time.to_int.to_string()+" s"
}

// Pretty print dt until this time
pub sync fn pretty_dt(time : float) -> string = {
    return pretty_time(time-current_time())
}

// Pretty print direction
pub sync fn pretty_trend(trend : float) -> string = {
    if (trend > 0) return "increasing"
    return "decreasing"
}

impl Display {

    // Rewrite top two lines with mission name, time etc.
    sync fn update(self) -> Unit = {

        // Top line. Mission + time
        let mission = self.mission.value
        let t = pretty_time(current_time()-mission.start_time)
        self.h1 = format("Mission: {0,-20} t: {1,-10}", (mission.name,t))

        let vessel = mission.vessel
        let alt_t = vessel.altitude_terrain
        let alt = vessel.altitude_sealevel 
        let atm = alt / (vessel.main_body.atmosphere_depth + 1)
        let atm_s = ""
        if (atm > 1) atm_s = "in space"
        else atm_s = format("{0,5:P1}", atm_s)
        let spd = vessel.surface_velocity.magnitude 
        self.h2 = format("body: {0,-10} msl/ter: {1,-10}/{2,-10} atm: ({3,-8:P1}) v: {4:N0} m/s", 
                        (vessel.orbit.reference_body.name, pretty_distance(alt), pretty_distance(alt_t), atm_s, spd))

        // Stage info
        let dv = vessel.delta_v.stage(vessel.staging.current)
        let fuel = "n/a"
        if (dv.defined) {
            let x = dv.value.start_mass/dv.value.fuel_mass
            fuel = format("{0,5:P1}", x) 
        }

        //self.h3 = format("stage: {0}/{1}    fuel: {2}", (vessel.staging.current, vessel.staging.count, fuel))

        CONSOLE.print_at( 0,0, format("{0,-80}",self.h1))
 
        CONSOLE.print_at( 1,0, format("{0,-80}",self.h2))
        CONSOLE.print_at( 2,0, format("{0,-80}",self.h3))
        CONSOLE.print_at( 3,0, format("{0,-80}",self.h4))
        CONSOLE.print_at( 4,0, format("{0,-80}",self.h5))
        CONSOLE.print_at( 5,0, "--------------------------------------------------------------------------------")
    }

    // Update, and sleep(1)
    fn update1(self) -> Unit = {
        self.update()
        sleep(1)
    }

    // Update only if 0.95s have passed
    fn update_slow(self) -> Unit = {
        const ct = current_time()
        if (ct-self.last_update > 0.95) {
            self.update()
            self.last_update = ct
        }
    }

    // Output a log message
    fn log(self, msg : string) -> Unit = {
        CONSOLE.print_line(msg)
        self.update()
        yield()
    }

    //fn flog(self, str : string, params : T) -> Unit = {
    //    self.log(format(str, params))
    //}

    // Initialize the console
    fn start(self, mission : glib::mission::Mission)-> Unit = { 
        self.mission = mission
        CONSOLE.clear()
        self.update()
        CONSOLE.move_cursor(99,0)
        CONSOLE.print_line("KSP2 Mission: "+mission.to_string())
    }
}
