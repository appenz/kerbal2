//
// Maneuver functions
//

use { Vessel, AutopilotMode, VesselSituation, DeltaVSituation  } from ksp::vessel
use { Body, Orbit } from ksp::orbit
use { vec2, vec3, Vec3 } from ksp::math
use { CONSOLE } from ksp::console
use { sleep, current_time, wait_until, yield } from ksp::game
use { warp_to, current_rate } from ksp::game::warp

use { acos_deg, clamp, sqrt, PI, min, max, exp, log } from core::math
use { format } from core::str

use { Mission } from glib::mission
use { pretty_distance, pretty_time, pretty_dt,  warning, panic } from glib::display
use { deg360 } from glib::utility

//
// Maneuver Node and helper functions
//

pub struct Node(t : float, dv : Vec3) {
    // Data for the Maneuver node
    time: float = t
    delta_v: Vec3 = dv

    //  Data from burn time estimation
    burn_stages: int = 1
    burn_time: float = 0
    burn_info: string = "n/a"
    burn_possible: bool = false
}

impl Node {

    // Is this a good/bad Node
    sync fn isError(self) -> bool = {
        if (self.time == -1) return true
        false
    }

    sync fn isValid(self) -> bool = {
        if (self.time == -1) return false
        true
    }

    sync fn split(self, n: Node, p: float) -> Node = {
        return Node(n.time,p*n.delta_v)
    }   

    // Estimate burn time for the node. Assume all in a single (current) stage
    sync fn estBurnTime(self, vessel: Vessel) -> float = {

        // Plan: We need to step through every remaining stage, and calculate burn time for the stage
        let stage = vessel.staging.count
        let dv_remaining = self.delta_v.magnitude
        self.burn_time = 0.0
        self.burn_stages = 0
        self.burn_info = "stages: "

        while(stage > 0 && dv_remaining > 0) {
            stage -= 1

            const maybe_stage_info = vessel.delta_v.stage(stage)
            if(!maybe_stage_info.defined) continue

            const stage_info = maybe_stage_info.value
            const dv_stage = stage_info.get_deltav(DeltaVSituation.Vaccum)
            const thrust = stage_info.get_thrust(DeltaVSituation.Vaccum)

            if (dv_stage == 0 || thrust == 0) {
                self.burn_time += 3 
                continue
            }

            // Calculate how much of total dv of this stage will we use
            const mass_start = stage_info.start_mass
            const mass_end = stage_info.end_mass
            const dv_burn = min(dv_stage, dv_remaining)
            const dv_fraction = dv_burn/dv_stage

            // Copied from KS2's github repo. Calculate average acceleration
            const stage_burn_final_mass = mass_start / exp(log(mass_start / mass_end) * dv_fraction)
            const stage_avg_accel = thrust / ((mass_start + stage_burn_final_mass) / 2)

            // Account for weight change during burn
            const t_stage = dv_burn/stage_avg_accel

            // Don't need this now, but eventually we may want to do things differently based on the type of engine
            const eng_c = stage_info.active_engines.length
            let eng_name = "unknown_engine"
            if( eng_c > 0) eng_name = eng_c.to_string()+"x "+stage_info.active_engines[0].engine_module.engine_modes[0].engine_type.to_string()
            
            // Update overall
            dv_remaining -= dv_burn
            self.burn_time += t_stage
            self.burn_stages += 1
            self.burn_info += format("[#{0}  dv:{1,5:N0} m/s t: {2} {3}]\n\r", 
                            (stage, dv_burn, pretty_time(t_stage), eng_name))

        }
    
        // Check if success, if yes return time
        if (dv_remaining < 0.01) {
            self.burn_possible = false
            return self.burn_time
        }

        // Don't have enough deltaV left
        self.burn_possible = false
        self.burn_time = 0
        self.burn_stages = 0
        self.burn_info = "Unable to burn node, insufficient dV"
        return self.burn_time
    }

    sync fn to_string(self) -> string = {
        let t = glib::display::pretty_time(self.time-current_time())
        return format("dt: {0}  dV: {1:N1} m/s stages: {2} burn: {3}", 
                        (t,self.delta_v.magnitude,self.burn_stages,pretty_time(self.burn_time)))    
    }

}

// Returns an invalid node
pub sync fn ErrorNode() -> Node = {
    return Node(-1, vec3(0,0,0))
}

//
// Functions for simple orbit adjustments
//

// Time needed for Hohmann transfer from alt1->alt2

pub sync fn t_hohmann(orbit : Orbit, alt1: float, alt2: float) -> float = {
    let body_radius = 1.0 // XXX
    let body_mu = orbit.reference_body.grav_parameter
    return PI * sqrt( (alt1+alt2+2*body_radius)**3/(8*body_mu) )
}

// Velocity at a specific altitude for current orbit.

pub sync fn vv_alt(orbit: Orbit, r: float) -> float = { 
  let body = orbit.reference_body
  return sqrt(body.grav_parameter*(2/(r+body.radius)-1/orbit.semi_major_axis))
}

// Velocity at a specific altitude for an arbitrary orbit

pub sync fn vv_axis(orbit: Orbit, r: float, axis: float) -> float = {
  let body = orbit.reference_body
  return sqrt(body.grav_parameter*(2/(r+body.radius)-1/axis))
}

// Velocity for a circular orbit at a given altitude AGL

pub sync fn vv_circular(orbit: Orbit, r: float) -> float = {
  return vv_axis(orbit, r, r+orbit.reference_body.radius)
}

// Match vessel inclination with a specific orbit
pub sync fn change_incl(vessel: Vessel, target_orbit: Orbit) -> Node = {
    const frame = vessel.main_body.celestial_frame
    const t = current_time()
    const ma_v = vessel.orbit.mean_anomaly_at_ut(t)
    const dn_ta = vessel.orbit.descending_node_true_anomaly(target_orbit)
    const an_ta = vessel.orbit.ascending_node_true_anomaly(target_orbit)
    const dt_dn = (( dn_ta-ma_v )/vessel.orbit.mean_motion + vessel.orbit.period) % vessel.orbit.period
    const dt_an = (( an_ta-ma_v )/vessel.orbit.mean_motion + vessel.orbit.period) % vessel.orbit.period

    // Pick whichever we hit first
    let t_node = t+min(dt_an, dt_dn)

    const v_vessel = vessel.orbit.global_velocity(t_node).to_local(frame)
    const dv_mag = -target_orbit.orbit_normal.normalized.dot(v_vessel)
    const dv = dv_mag*vessel.orbit.orbit_normal
    warning(format("{0:N3} {1:N3} delta: {2:N3} mean_v: {3:N4} t: {4}", (ma_v, dn_ta, (dn_ta-ma_v), vessel.orbit.mean_motion, pretty_dt(t_node) )))
    return Node(t_node,dv)
}

// Chage the Periapsis at the next Apoapsis

pub sync fn change_pe_at_ap(vessel: Vessel, new_pe: float) -> Node = {
    let t_ap = vessel.orbit.next_apoapsis_time()
    let ap = vessel.orbit.apoapsis
    if (!t_ap.defined || !ap.defined) {
        panic("Apoapsis undefined in change_pe_at_ap.")
        return ErrorNode()
    }
    let v_ap = vv_alt(vessel.orbit,ap.value)
    let v_new = vv_axis(vessel.orbit,ap.value,(ap.value+2*vessel.orbit.reference_body.radius+new_pe)/2)
    let dv = (v_new-v_ap)*vessel.orbit.horizontal(t_ap.value)
    return Node(t_ap.value,dv)
}

pub sync fn change_ap_at_pe(vessel: Vessel, new_ap: float) -> Node = {
    let t_pe = vessel.orbit.next_periapsis_time()
    let pe = vessel.orbit.periapsis
    let v_pe = vv_alt(vessel.orbit,pe)
    let v_new = vv_axis(vessel.orbit,pe,(pe+2*vessel.orbit.reference_body.radius+new_ap)/2)
    let dv = (v_new-v_pe)*vessel.orbit.horizontal(t_pe)
    return Node(t_pe,dv)
}

pub sync fn circularize_at_ap(vessel: Vessel) -> Node = {
    if (!vessel.orbit.apoapsis.defined) {
        panic("Apoapsis undefined in circualize_at_ap.")
        return ErrorNode()
    }
    return change_pe_at_ap(vessel, vessel.orbit.apoapsis.value)    
}

pub sync fn circularize_at_pe(vessel: Vessel) -> Node = {
    return change_ap_at_pe(vessel, vessel.orbit.periapsis)     
}

// Burn a node in the Vacuum. This is surprisingly hard.

pub fn burnNextNodeVac(mission: Mission) -> Unit = {
    let con  = mission.console.value
    let vessel = mission.vessel
    let orbit = vessel.orbit
    const node_result = vessel.maneuver.next_node()

    if (!node_result.success) {
        panic("Called burn_node with no maneuver node set.")
        return
    }

    if (mission.stage_thrust == 0) {
        warning("Calling burnNextNode with zero thrust!")
        return
    }

    const node = node_result.value
    const target_orbit = node.expected_orbit
    const frame = vessel.main_body.celestial_frame
    let t_end = node.time + node.burn_duration

    // Need code here to orient vessel first
    while( current_time() < node.time - 15 ) {
        warp_to(node.time - 10)
        sleep(1)
        wait_until(fn() -> current_rate() < 1.5)
    }
    con.log("  done.")
    vessel.autopilot.enabled = true
    vessel.autopilot.mode = AutopilotMode.Maneuver
    wait_until(fn() -> node.ETA <= 0.2)

    let t = current_time()

    let dv_min = 10E35
    let stop = false
    let throttle = 0.01
    let dv_total = node.global_burn_vector.vector
    let dv = dv_total
    let burn_time = node.burn_duration

    con.log(format("Vacuum burn dv: {0:N0} m/s  dt: {1}", (dv_total.magnitude, pretty_time(burn_time))))
    const t_start = current_time()

    while (!stop && dv.magnitude > 0.1 ) {
        t = current_time()
        dv = target_orbit.global_velocity(t).to_relative(frame) - vessel.orbit.global_velocity(t).to_relative(frame)
        burn_time = dv.magnitude/(mission.stage_thrust/vessel.mass)
        throttle = clamp(burn_time/2, 0.01,1.0)

        if( mission.flameout() ) {
            con.log("Flameout.")
            vessel.set_throttle(0)
            mission.stage() 
            t_end += 5      
        }

        if (t > t_end+10) {
            con.log("  stop burn due to time exceeded.")
            stop = true
        }

        if (dv.magnitude > dv_min*1.05) {
            con.log(format("  stop burn due to dv increase dv: {0:N1} m/s",(dv.magnitude)))
            stop=true 
        }
        dv_min = min(dv.magnitude,dv_min)

        con.h4 = format("Node Burn: {0:N1} s ({1:P1})   dV: {2:N2} ({3:P1})  throttle: {4}", 
                        (burn_time,burn_time/node.burn_duration, dv.magnitude, dv.magnitude/dv_total.magnitude, throttle) )

        if (!stop) {
            vessel.set_throttle(throttle)
            sleep(0.1)
            con.update_slow()
        }
    }

    vessel.set_throttle(0)
    yield()
    con.log(format("  ended after {0}  dv_err: {1:N1} ({2:P1})", (pretty_time(current_time()-t_start), dv.magnitude, dv.magnitude/dv_total.magnitude)))
    vessel.autopilot.mode = AutopilotMode.Prograde
    sleep(0.5)
    node.remove()
    sleep(0.5)
}

// Launch vessel to a specific orbit in vaccum

pub fn launch_vacuum(mission: Mission, alt_orbit: float) -> Unit = {

    const vessel = mission.vessel
    const con = mission.console.value

    con.log(format("Vacuum launch to alt {0}",
                    (pretty_distance(alt_orbit))) )

    vessel.autopilot.target_orientation = vessel.heading_direction(90, 90, 0).vector
    vessel.autopilot.mode = AutopilotMode.Autopilot
    vessel.set_throttle(1)

    // Straight up to 20m
    while(vessel.orbit.apoapsis.value < 50) {
        if( mission.flameout() ) mission.stage()   
        con.update1()
    }

    vessel.actions.gear = false

    // Turn 45 degrees
    vessel.autopilot.target_orientation = vessel.heading_direction(90, 10, 0).vector
    while(vessel.orbit.apoapsis.value < alt_orbit*0.8) {
        if( mission.flameout() ) mission.stage()       
        con.update1()
    }

    vessel.set_throttle(0)
    vessel.autopilot.mode = AutopilotMode.Prograde

    // Critical: need to let the system catch up, otherwise maneuver node is broken
    sleep(1)

    // Series of maneuvers to get to target orbit
    let n1 = change_pe_at_ap(vessel,alt_orbit)
    mission.burnManeuver(n1)
    con.log("1st burn complete.")

    // Second, precision burn to raise periapsis
    let n2 = circularize_at_ap(vessel)
    mission.burnManeuver(n2)
    con.log("2nd burn complete.")

    if (vessel.orbit.periapsis < alt_orbit) {
        con.log("Warning! Periapsis low, raising.")
        let n3 = circularize_at_ap(vessel)
        mission.burnManeuver(n3)
    }

    // Print orbit with apoapsis and periapsis
    con.log(format("  Orbit achieved ap: {0}  pe: {1}",
                    (pretty_distance(vessel.orbit.apoapsis.value), pretty_distance(vessel.orbit.periapsis))) )

}
