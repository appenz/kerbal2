use { Vessel } from ksp::vessel
use { Mission } from glib::mission
use { launch_atmosphere } from glib::maneuver_atmosphere
use { Transfer } from glib::transfer
use { circularize_at_pe, change_pe_at_ap, change_ap_at_pe, change_incl } from glib::maneuver_vacuum
use { Universe, lon_sunny_side } from glib::utility
use { land_vessel } from glib::landing
use { sleep, current_time } from ksp::game
use { format } from core::str

pub fn main_flight(vessel: Vessel, target_apoapsis: int = 80000) -> Unit = {

    const orbit_alt = 20000.0
    const deorbit_angle = 5.0

    // Standard Setup
    let mission = Mission("To minmus!",vessel)
    let con = mission.start()
    let MINMUS = Universe().MINMUS

    // Check if we are still in the process of getting to Orbit
    if (vessel.orbit.reference_body.name == "Kerbin" && vessel.orbit.periapsis < 75000) {
       launch_atmosphere(mission, target_apoapsis, 0.01, 0.7, 90)
    }

    // We made it to Orbit, if we are we still around Kerbin plan transfer and correction
    if (vessel.orbit.reference_body.name == "Kerbin") {

        // Are we still low? If yes, check if we need to change inclination
        if (mission.apoapsis() < 100000) {
            let ni = change_incl(vessel, MINMUS.orbit)
            if (mission.apoapsis() < 100000 && ni.delta_v.magnitude > 10) {
                con.log(format("Inclination change needed, dV={0:N1} m/s",(ni.delta_v.magnitude)))
                mission.burnManeuver(ni)
            }
        }

        // Create the transfer plan to Minmus
        con.log("Starting transfer to Minmus")
        const t = Transfer(mission, "Minmus", MINMUS.SOI_radius*0.2)
        
        // If we are still low do the initial ejection burn from Kerbin orbit
        if (mission.apoapsis() < 100000) {
            const n = t.getTransferNode()
            mission.burnManeuver(n)
            con.log("  ejection burn complete.")
        }

        // Second burn to correct trajectory an altitude of 1000 km
        if (vessel.altitude_sealevel < 1000000) {
            mission.warpToAltitude(1000000)
        }
        const n = t.getCorrectionNode()
        mission.addManeuver(n)
        mission.burnManeuver(n)
        con.log("  correction burn complete.")
    }

    // Wait for SOI of the Minmus
    if (vessel.orbit.reference_body.name == "Kerbin") {
        mission.warpToSOI("Minmus")
    }

    // We are in the SOI of Minmus. First, check if we have to circularize
    if (!vessel.orbit.apoapsis.defined) {
        con.log("Lowering Apoapsis.")
        const n2 = circularize_at_pe(vessel)
        mission.burnManeuver(n2)
    }

    // Lower orbit
    if ( vessel.orbit.apoapsis.value > orbit_alt*1.1) {
        con.log("Lowering Orbit to 10k.")
        let n3 = change_pe_at_ap(vessel,orbit_alt)
        mission.burnManeuver(n3)

        let n4 = change_ap_at_pe(vessel,orbit_alt)
        mission.burnManeuver(n4)
    }

    // Land at the default site
    const lat = 0.0
    const lon = 6.0
    //const lon = lon_sunny_side(mission)
    const body = vessel.orbit.reference_body
    const frame = vessel.main_body.celestial_frame
    const landing_site = body.geo_coordinates ( lat,lon )
    con.log(format("  landing at site: {0:N1}/{1:N1}  (ship long: {2:N1})",
            (lat, lon, vessel.geo_coordinates.longitude)) )
    let ground = ksp::debug::DEBUG.add_ground_marker(landing_site, ksp::console::RED, 0)

    if (vessel.orbit.periapsis > 1000) {
        // Location picked, let's land there.
        const rel_angle = (landing_site.longitude - vessel.geo_coordinates.longitude - deorbit_angle + 720) % 360

        // Correct for rotation
        let rot_corr = 1+vessel.orbit.period/body.rotation_period 
        const dt = rel_angle/360*vessel.orbit.period*rot_corr
        con.log(format("  rel angle to deorbit: {0:N} eta {1}",(rel_angle,dt)))

        let n = change_pe_at_ap(vessel, 0)

        // Burn this amount of dV, but right time and direction
        n.time = current_time()+dt
        n.delta_v = vessel.orbit.global_velocity(n.time).to_local(frame).normalized*n.delta_v.magnitude
        mission.addManeuver(n)
        mission.burnNextNode()
    }
    land_vessel(mission, landing_site)

    mission.end()
}